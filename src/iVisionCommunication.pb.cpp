// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iVisionCommunication.proto

#include "iVisionCommunication.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace iVisionCommunication {
PROTOBUF_CONSTEXPR BasicCommands::BasicCommands(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_parameters_)*/{}
  , /*decltype(_impl_.method_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BasicCommandsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BasicCommandsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BasicCommandsDefaultTypeInternal() {}
  union {
    BasicCommands _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BasicCommandsDefaultTypeInternal _BasicCommands_default_instance_;
PROTOBUF_CONSTEXPR Acknowledgement::Acknowledgement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameter_float_)*/{}
  , /*decltype(_impl_.parameter_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcknowledgementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcknowledgementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcknowledgementDefaultTypeInternal() {}
  union {
    Acknowledgement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcknowledgementDefaultTypeInternal _Acknowledgement_default_instance_;
PROTOBUF_CONSTEXPR TrackerData::TrackerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.heart_beat_)*/0u
  , /*decltype(_impl_.el_angle_)*/0
  , /*decltype(_impl_.az_angle_)*/0
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_.op_mode_)*/0
  , /*decltype(_impl_.locked_)*/false
  , /*decltype(_impl_.img_flag_)*/false
  , /*decltype(_impl_.ref_mode_)*/false
  , /*decltype(_impl_.jog_el_angle_)*/0
  , /*decltype(_impl_.jog_az_angle_)*/0
  , /*decltype(_impl_.jog_distance_)*/0
  , /*decltype(_impl_.jog_hb_)*/0u
  , /*decltype(_impl_.distance_command_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackerDataDefaultTypeInternal() {}
  union {
    TrackerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackerDataDefaultTypeInternal _TrackerData_default_instance_;
}  // namespace iVisionCommunication
static ::_pb::Metadata file_level_metadata_iVisionCommunication_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_iVisionCommunication_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_iVisionCommunication_2eproto = nullptr;

const uint32_t TableStruct_iVisionCommunication_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::BasicCommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::BasicCommands, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::BasicCommands, _impl_.payload_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::Acknowledgement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::Acknowledgement, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::Acknowledgement, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::Acknowledgement, _impl_.parameter_string_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::Acknowledgement, _impl_.parameter_float_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.heart_beat_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.el_angle_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.az_angle_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.distance_command_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.locked_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.op_mode_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.img_flag_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.ref_mode_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.jog_el_angle_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.jog_az_angle_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.jog_distance_),
  PROTOBUF_FIELD_OFFSET(::iVisionCommunication::TrackerData, _impl_.jog_hb_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::iVisionCommunication::BasicCommands)},
  { 8, -1, -1, sizeof(::iVisionCommunication::Acknowledgement)},
  { 18, -1, -1, sizeof(::iVisionCommunication::TrackerData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::iVisionCommunication::_BasicCommands_default_instance_._instance,
  &::iVisionCommunication::_Acknowledgement_default_instance_._instance,
  &::iVisionCommunication::_TrackerData_default_instance_._instance,
};

const char descriptor_table_protodef_iVisionCommunication_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032iVisionCommunication.proto\022\024iVisionCom"
  "munication\"[\n\rBasicCommands\022.\n\006method\030\001 "
  "\001(\0162\036.iVisionCommunication.MethodId\022\032\n\022p"
  "ayload_parameters\030\002 \003(\002\"\205\001\n\017Acknowledgem"
  "ent\022.\n\006method\030\001 \001(\0162\036.iVisionCommunicati"
  "on.MethodId\022\017\n\007success\030\002 \001(\010\022\030\n\020paramete"
  "r_string\030\003 \001(\t\022\027\n\017parameter_float\030\004 \003(\002\""
  "\255\002\n\013TrackerData\022\022\n\nheart_beat\030\001 \001(\007\022\020\n\010e"
  "l_angle\030\002 \001(\002\022\020\n\010az_angle\030\003 \001(\002\022\020\n\010dista"
  "nce\030\004 \001(\002\022\030\n\020distance_command\030\r \001(\002\022\016\n\006l"
  "ocked\030\005 \001(\010\0224\n\007op_mode\030\006 \001(\0162#.iVisionCo"
  "mmunication.OperationMode\022\020\n\010img_flag\030\007 "
  "\001(\010\022\020\n\010ref_mode\030\010 \001(\010\022\024\n\014jog_el_angle\030\t "
  "\001(\002\022\024\n\014jog_az_angle\030\n \001(\002\022\024\n\014jog_distanc"
  "e\030\013 \001(\002\022\016\n\006jog_hb\030\014 \001(\007*\233\003\n\010MethodId\022\013\n\007"
  "Connect\020\000\022\r\n\tBroadcast\020\001\022\n\n\006MoveBy\020\002\022\n\n\006"
  "MoveTo\020\003\022\020\n\014SetPSDLocked\020\004\022\022\n\016SetPSDUnlo"
  "cked\020\005\022\020\n\014GetPSDLocked\020\006\022\022\n\016SetFlashOffs"
  "et\020\007\022\022\n\016GetFlashOffset\020\010\022\024\n\020SetFlashDura"
  "tion\020\t\022\024\n\020GetFlashDuration\020\n\022\026\n\022SetFlash"
  "Brightness\020\013\022\026\n\022GetFlashBrightness\020\014\022\022\n\016"
  "SetFlashInTKOn\020\r\022\023\n\017SetFlashInTKOff\020\016\022\020\n"
  "\014GetFlashInTK\020\017\022\020\n\014SetCamModeOn\020\020\022\021\n\rSet"
  "CamModeOff\020\021\022\017\n\013StartSpiral\020\022\022\016\n\nStopSpi"
  "ral\020\023\022\r\n\tSetSpiral\020\024\022\017\n\013SetLEDState\020\025*s\n"
  "\rOperationMode\022\010\n\004Idle\020\000\022\t\n\005Servo\020\001\022\t\n\005T"
  "rack\020\002\022\r\n\tTrackIdle\020\003\022\017\n\013IndexSearch\020\004\022\020"
  "\n\014SpiralSearch\020\005\022\020\n\014CameraSearch\020\006b\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_iVisionCommunication_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_iVisionCommunication_2eproto = {
    false, false, 1122, descriptor_table_protodef_iVisionCommunication_2eproto,
    "iVisionCommunication.proto",
    &descriptor_table_iVisionCommunication_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_iVisionCommunication_2eproto::offsets,
    file_level_metadata_iVisionCommunication_2eproto, file_level_enum_descriptors_iVisionCommunication_2eproto,
    file_level_service_descriptors_iVisionCommunication_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_iVisionCommunication_2eproto_getter() {
  return &descriptor_table_iVisionCommunication_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_iVisionCommunication_2eproto(&descriptor_table_iVisionCommunication_2eproto);
namespace iVisionCommunication {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MethodId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iVisionCommunication_2eproto);
  return file_level_enum_descriptors_iVisionCommunication_2eproto[0];
}
bool MethodId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iVisionCommunication_2eproto);
  return file_level_enum_descriptors_iVisionCommunication_2eproto[1];
}
bool OperationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BasicCommands::_Internal {
 public:
};

BasicCommands::BasicCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iVisionCommunication.BasicCommands)
}
BasicCommands::BasicCommands(const BasicCommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BasicCommands* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_parameters_){from._impl_.payload_parameters_}
    , decltype(_impl_.method_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.method_ = from._impl_.method_;
  // @@protoc_insertion_point(copy_constructor:iVisionCommunication.BasicCommands)
}

inline void BasicCommands::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_parameters_){arena}
    , decltype(_impl_.method_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BasicCommands::~BasicCommands() {
  // @@protoc_insertion_point(destructor:iVisionCommunication.BasicCommands)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BasicCommands::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_parameters_.~RepeatedField();
}

void BasicCommands::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BasicCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:iVisionCommunication.BasicCommands)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_parameters_.Clear();
  _impl_.method_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicCommands::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iVisionCommunication.MethodId method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::iVisionCommunication::MethodId>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated float payload_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_payload_parameters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_payload_parameters(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasicCommands::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iVisionCommunication.BasicCommands)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iVisionCommunication.MethodId method = 1;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_method(), target);
  }

  // repeated float payload_parameters = 2;
  if (this->_internal_payload_parameters_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_payload_parameters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iVisionCommunication.BasicCommands)
  return target;
}

size_t BasicCommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iVisionCommunication.BasicCommands)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float payload_parameters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_payload_parameters_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .iVisionCommunication.MethodId method = 1;
  if (this->_internal_method() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasicCommands::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BasicCommands::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasicCommands::GetClassData() const { return &_class_data_; }


void BasicCommands::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BasicCommands*>(&to_msg);
  auto& from = static_cast<const BasicCommands&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iVisionCommunication.BasicCommands)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.payload_parameters_.MergeFrom(from._impl_.payload_parameters_);
  if (from._internal_method() != 0) {
    _this->_internal_set_method(from._internal_method());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasicCommands::CopyFrom(const BasicCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iVisionCommunication.BasicCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicCommands::IsInitialized() const {
  return true;
}

void BasicCommands::InternalSwap(BasicCommands* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.payload_parameters_.InternalSwap(&other->_impl_.payload_parameters_);
  swap(_impl_.method_, other->_impl_.method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicCommands::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_iVisionCommunication_2eproto_getter, &descriptor_table_iVisionCommunication_2eproto_once,
      file_level_metadata_iVisionCommunication_2eproto[0]);
}

// ===================================================================

class Acknowledgement::_Internal {
 public:
};

Acknowledgement::Acknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iVisionCommunication.Acknowledgement)
}
Acknowledgement::Acknowledgement(const Acknowledgement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Acknowledgement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parameter_float_){from._impl_.parameter_float_}
    , decltype(_impl_.parameter_string_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parameter_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parameter_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parameter_string().empty()) {
    _this->_impl_.parameter_string_.Set(from._internal_parameter_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.method_, &from._impl_.method_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.method_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:iVisionCommunication.Acknowledgement)
}

inline void Acknowledgement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parameter_float_){arena}
    , decltype(_impl_.parameter_string_){}
    , decltype(_impl_.method_){0}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.parameter_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parameter_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Acknowledgement::~Acknowledgement() {
  // @@protoc_insertion_point(destructor:iVisionCommunication.Acknowledgement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Acknowledgement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameter_float_.~RepeatedField();
  _impl_.parameter_string_.Destroy();
}

void Acknowledgement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Acknowledgement::Clear() {
// @@protoc_insertion_point(message_clear_start:iVisionCommunication.Acknowledgement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameter_float_.Clear();
  _impl_.parameter_string_.ClearToEmpty();
  ::memset(&_impl_.method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.method_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Acknowledgement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iVisionCommunication.MethodId method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::iVisionCommunication::MethodId>(val));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string parameter_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_parameter_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iVisionCommunication.Acknowledgement.parameter_string"));
        } else
          goto handle_unusual;
        continue;
      // repeated float parameter_float = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_parameter_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_parameter_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Acknowledgement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iVisionCommunication.Acknowledgement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iVisionCommunication.MethodId method = 1;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_method(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string parameter_string = 3;
  if (!this->_internal_parameter_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parameter_string().data(), static_cast<int>(this->_internal_parameter_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iVisionCommunication.Acknowledgement.parameter_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_parameter_string(), target);
  }

  // repeated float parameter_float = 4;
  if (this->_internal_parameter_float_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_parameter_float(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iVisionCommunication.Acknowledgement)
  return target;
}

size_t Acknowledgement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iVisionCommunication.Acknowledgement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float parameter_float = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_parameter_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string parameter_string = 3;
  if (!this->_internal_parameter_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parameter_string());
  }

  // .iVisionCommunication.MethodId method = 1;
  if (this->_internal_method() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_method());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Acknowledgement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Acknowledgement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Acknowledgement::GetClassData() const { return &_class_data_; }


void Acknowledgement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Acknowledgement*>(&to_msg);
  auto& from = static_cast<const Acknowledgement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iVisionCommunication.Acknowledgement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameter_float_.MergeFrom(from._impl_.parameter_float_);
  if (!from._internal_parameter_string().empty()) {
    _this->_internal_set_parameter_string(from._internal_parameter_string());
  }
  if (from._internal_method() != 0) {
    _this->_internal_set_method(from._internal_method());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Acknowledgement::CopyFrom(const Acknowledgement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iVisionCommunication.Acknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acknowledgement::IsInitialized() const {
  return true;
}

void Acknowledgement::InternalSwap(Acknowledgement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameter_float_.InternalSwap(&other->_impl_.parameter_float_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parameter_string_, lhs_arena,
      &other->_impl_.parameter_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Acknowledgement, _impl_.success_)
      + sizeof(Acknowledgement::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(Acknowledgement, _impl_.method_)>(
          reinterpret_cast<char*>(&_impl_.method_),
          reinterpret_cast<char*>(&other->_impl_.method_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Acknowledgement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_iVisionCommunication_2eproto_getter, &descriptor_table_iVisionCommunication_2eproto_once,
      file_level_metadata_iVisionCommunication_2eproto[1]);
}

// ===================================================================

class TrackerData::_Internal {
 public:
};

TrackerData::TrackerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iVisionCommunication.TrackerData)
}
TrackerData::TrackerData(const TrackerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.heart_beat_){}
    , decltype(_impl_.el_angle_){}
    , decltype(_impl_.az_angle_){}
    , decltype(_impl_.distance_){}
    , decltype(_impl_.op_mode_){}
    , decltype(_impl_.locked_){}
    , decltype(_impl_.img_flag_){}
    , decltype(_impl_.ref_mode_){}
    , decltype(_impl_.jog_el_angle_){}
    , decltype(_impl_.jog_az_angle_){}
    , decltype(_impl_.jog_distance_){}
    , decltype(_impl_.jog_hb_){}
    , decltype(_impl_.distance_command_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.heart_beat_, &from._impl_.heart_beat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_command_) -
    reinterpret_cast<char*>(&_impl_.heart_beat_)) + sizeof(_impl_.distance_command_));
  // @@protoc_insertion_point(copy_constructor:iVisionCommunication.TrackerData)
}

inline void TrackerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.heart_beat_){0u}
    , decltype(_impl_.el_angle_){0}
    , decltype(_impl_.az_angle_){0}
    , decltype(_impl_.distance_){0}
    , decltype(_impl_.op_mode_){0}
    , decltype(_impl_.locked_){false}
    , decltype(_impl_.img_flag_){false}
    , decltype(_impl_.ref_mode_){false}
    , decltype(_impl_.jog_el_angle_){0}
    , decltype(_impl_.jog_az_angle_){0}
    , decltype(_impl_.jog_distance_){0}
    , decltype(_impl_.jog_hb_){0u}
    , decltype(_impl_.distance_command_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrackerData::~TrackerData() {
  // @@protoc_insertion_point(destructor:iVisionCommunication.TrackerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrackerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackerData::Clear() {
// @@protoc_insertion_point(message_clear_start:iVisionCommunication.TrackerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.heart_beat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.distance_command_) -
      reinterpret_cast<char*>(&_impl_.heart_beat_)) + sizeof(_impl_.distance_command_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed32 heart_beat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.heart_beat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // float el_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.el_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float az_angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.az_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool locked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iVisionCommunication.OperationMode op_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op_mode(static_cast<::iVisionCommunication::OperationMode>(val));
        } else
          goto handle_unusual;
        continue;
      // bool img_flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.img_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ref_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.ref_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float jog_el_angle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.jog_el_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float jog_az_angle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.jog_az_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float jog_distance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.jog_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // fixed32 jog_hb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.jog_hb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // float distance_command = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.distance_command_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iVisionCommunication.TrackerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 heart_beat = 1;
  if (this->_internal_heart_beat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_heart_beat(), target);
  }

  // float el_angle = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_el_angle = this->_internal_el_angle();
  uint32_t raw_el_angle;
  memcpy(&raw_el_angle, &tmp_el_angle, sizeof(tmp_el_angle));
  if (raw_el_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_el_angle(), target);
  }

  // float az_angle = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_az_angle = this->_internal_az_angle();
  uint32_t raw_az_angle;
  memcpy(&raw_az_angle, &tmp_az_angle, sizeof(tmp_az_angle));
  if (raw_az_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_az_angle(), target);
  }

  // float distance = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance = this->_internal_distance();
  uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  // bool locked = 5;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_locked(), target);
  }

  // .iVisionCommunication.OperationMode op_mode = 6;
  if (this->_internal_op_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_op_mode(), target);
  }

  // bool img_flag = 7;
  if (this->_internal_img_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_img_flag(), target);
  }

  // bool ref_mode = 8;
  if (this->_internal_ref_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_ref_mode(), target);
  }

  // float jog_el_angle = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jog_el_angle = this->_internal_jog_el_angle();
  uint32_t raw_jog_el_angle;
  memcpy(&raw_jog_el_angle, &tmp_jog_el_angle, sizeof(tmp_jog_el_angle));
  if (raw_jog_el_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_jog_el_angle(), target);
  }

  // float jog_az_angle = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jog_az_angle = this->_internal_jog_az_angle();
  uint32_t raw_jog_az_angle;
  memcpy(&raw_jog_az_angle, &tmp_jog_az_angle, sizeof(tmp_jog_az_angle));
  if (raw_jog_az_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_jog_az_angle(), target);
  }

  // float jog_distance = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jog_distance = this->_internal_jog_distance();
  uint32_t raw_jog_distance;
  memcpy(&raw_jog_distance, &tmp_jog_distance, sizeof(tmp_jog_distance));
  if (raw_jog_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_jog_distance(), target);
  }

  // fixed32 jog_hb = 12;
  if (this->_internal_jog_hb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(12, this->_internal_jog_hb(), target);
  }

  // float distance_command = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance_command = this->_internal_distance_command();
  uint32_t raw_distance_command;
  memcpy(&raw_distance_command, &tmp_distance_command, sizeof(tmp_distance_command));
  if (raw_distance_command != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_distance_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iVisionCommunication.TrackerData)
  return target;
}

size_t TrackerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iVisionCommunication.TrackerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed32 heart_beat = 1;
  if (this->_internal_heart_beat() != 0) {
    total_size += 1 + 4;
  }

  // float el_angle = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_el_angle = this->_internal_el_angle();
  uint32_t raw_el_angle;
  memcpy(&raw_el_angle, &tmp_el_angle, sizeof(tmp_el_angle));
  if (raw_el_angle != 0) {
    total_size += 1 + 4;
  }

  // float az_angle = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_az_angle = this->_internal_az_angle();
  uint32_t raw_az_angle;
  memcpy(&raw_az_angle, &tmp_az_angle, sizeof(tmp_az_angle));
  if (raw_az_angle != 0) {
    total_size += 1 + 4;
  }

  // float distance = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance = this->_internal_distance();
  uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 4;
  }

  // .iVisionCommunication.OperationMode op_mode = 6;
  if (this->_internal_op_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_op_mode());
  }

  // bool locked = 5;
  if (this->_internal_locked() != 0) {
    total_size += 1 + 1;
  }

  // bool img_flag = 7;
  if (this->_internal_img_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool ref_mode = 8;
  if (this->_internal_ref_mode() != 0) {
    total_size += 1 + 1;
  }

  // float jog_el_angle = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jog_el_angle = this->_internal_jog_el_angle();
  uint32_t raw_jog_el_angle;
  memcpy(&raw_jog_el_angle, &tmp_jog_el_angle, sizeof(tmp_jog_el_angle));
  if (raw_jog_el_angle != 0) {
    total_size += 1 + 4;
  }

  // float jog_az_angle = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jog_az_angle = this->_internal_jog_az_angle();
  uint32_t raw_jog_az_angle;
  memcpy(&raw_jog_az_angle, &tmp_jog_az_angle, sizeof(tmp_jog_az_angle));
  if (raw_jog_az_angle != 0) {
    total_size += 1 + 4;
  }

  // float jog_distance = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jog_distance = this->_internal_jog_distance();
  uint32_t raw_jog_distance;
  memcpy(&raw_jog_distance, &tmp_jog_distance, sizeof(tmp_jog_distance));
  if (raw_jog_distance != 0) {
    total_size += 1 + 4;
  }

  // fixed32 jog_hb = 12;
  if (this->_internal_jog_hb() != 0) {
    total_size += 1 + 4;
  }

  // float distance_command = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance_command = this->_internal_distance_command();
  uint32_t raw_distance_command;
  memcpy(&raw_distance_command, &tmp_distance_command, sizeof(tmp_distance_command));
  if (raw_distance_command != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackerData::GetClassData() const { return &_class_data_; }


void TrackerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackerData*>(&to_msg);
  auto& from = static_cast<const TrackerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iVisionCommunication.TrackerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_heart_beat() != 0) {
    _this->_internal_set_heart_beat(from._internal_heart_beat());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_el_angle = from._internal_el_angle();
  uint32_t raw_el_angle;
  memcpy(&raw_el_angle, &tmp_el_angle, sizeof(tmp_el_angle));
  if (raw_el_angle != 0) {
    _this->_internal_set_el_angle(from._internal_el_angle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_az_angle = from._internal_az_angle();
  uint32_t raw_az_angle;
  memcpy(&raw_az_angle, &tmp_az_angle, sizeof(tmp_az_angle));
  if (raw_az_angle != 0) {
    _this->_internal_set_az_angle(from._internal_az_angle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance = from._internal_distance();
  uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  if (from._internal_op_mode() != 0) {
    _this->_internal_set_op_mode(from._internal_op_mode());
  }
  if (from._internal_locked() != 0) {
    _this->_internal_set_locked(from._internal_locked());
  }
  if (from._internal_img_flag() != 0) {
    _this->_internal_set_img_flag(from._internal_img_flag());
  }
  if (from._internal_ref_mode() != 0) {
    _this->_internal_set_ref_mode(from._internal_ref_mode());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jog_el_angle = from._internal_jog_el_angle();
  uint32_t raw_jog_el_angle;
  memcpy(&raw_jog_el_angle, &tmp_jog_el_angle, sizeof(tmp_jog_el_angle));
  if (raw_jog_el_angle != 0) {
    _this->_internal_set_jog_el_angle(from._internal_jog_el_angle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jog_az_angle = from._internal_jog_az_angle();
  uint32_t raw_jog_az_angle;
  memcpy(&raw_jog_az_angle, &tmp_jog_az_angle, sizeof(tmp_jog_az_angle));
  if (raw_jog_az_angle != 0) {
    _this->_internal_set_jog_az_angle(from._internal_jog_az_angle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jog_distance = from._internal_jog_distance();
  uint32_t raw_jog_distance;
  memcpy(&raw_jog_distance, &tmp_jog_distance, sizeof(tmp_jog_distance));
  if (raw_jog_distance != 0) {
    _this->_internal_set_jog_distance(from._internal_jog_distance());
  }
  if (from._internal_jog_hb() != 0) {
    _this->_internal_set_jog_hb(from._internal_jog_hb());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance_command = from._internal_distance_command();
  uint32_t raw_distance_command;
  memcpy(&raw_distance_command, &tmp_distance_command, sizeof(tmp_distance_command));
  if (raw_distance_command != 0) {
    _this->_internal_set_distance_command(from._internal_distance_command());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackerData::CopyFrom(const TrackerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iVisionCommunication.TrackerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerData::IsInitialized() const {
  return true;
}

void TrackerData::InternalSwap(TrackerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackerData, _impl_.distance_command_)
      + sizeof(TrackerData::_impl_.distance_command_)
      - PROTOBUF_FIELD_OFFSET(TrackerData, _impl_.heart_beat_)>(
          reinterpret_cast<char*>(&_impl_.heart_beat_),
          reinterpret_cast<char*>(&other->_impl_.heart_beat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_iVisionCommunication_2eproto_getter, &descriptor_table_iVisionCommunication_2eproto_once,
      file_level_metadata_iVisionCommunication_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace iVisionCommunication
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iVisionCommunication::BasicCommands*
Arena::CreateMaybeMessage< ::iVisionCommunication::BasicCommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iVisionCommunication::BasicCommands >(arena);
}
template<> PROTOBUF_NOINLINE ::iVisionCommunication::Acknowledgement*
Arena::CreateMaybeMessage< ::iVisionCommunication::Acknowledgement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iVisionCommunication::Acknowledgement >(arena);
}
template<> PROTOBUF_NOINLINE ::iVisionCommunication::TrackerData*
Arena::CreateMaybeMessage< ::iVisionCommunication::TrackerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iVisionCommunication::TrackerData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
